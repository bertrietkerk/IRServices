// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace IrServiceHost.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class MostFrequentDriverViewModel
    {
        /// <summary>
        /// Initializes a new instance of the MostFrequentDriverViewModel
        /// class.
        /// </summary>
        public MostFrequentDriverViewModel() { }

        /// <summary>
        /// Initializes a new instance of the MostFrequentDriverViewModel
        /// class.
        /// </summary>
        public MostFrequentDriverViewModel(string age = default(string), bool? hadDamageOrTheftBefore = default(bool?), string damageFreeYears = default(string), string kilometersPerYear = default(string), string zipCode = default(string), string country = default(string), Address residenceAddress = default(Address), bool? isCorrespondenceAddressDifferent = default(bool?), Address correspondenceAddress = default(Address), bool? isSelfEmployed = default(bool?), string sex = default(string), string firstName = default(string), string lastName = default(string), DateTime? birthDate = default(DateTime?), string socialSecurityNumber = default(string), string haveIncome = default(string), string organisationName = default(string), string organisationID = default(string), string phoneNumber = default(string), string emailAddress = default(string))
        {
            Age = age;
            HadDamageOrTheftBefore = hadDamageOrTheftBefore;
            DamageFreeYears = damageFreeYears;
            KilometersPerYear = kilometersPerYear;
            ZipCode = zipCode;
            Country = country;
            ResidenceAddress = residenceAddress;
            IsCorrespondenceAddressDifferent = isCorrespondenceAddressDifferent;
            CorrespondenceAddress = correspondenceAddress;
            IsSelfEmployed = isSelfEmployed;
            Sex = sex;
            FirstName = firstName;
            LastName = lastName;
            BirthDate = birthDate;
            SocialSecurityNumber = socialSecurityNumber;
            HaveIncome = haveIncome;
            OrganisationName = organisationName;
            OrganisationID = organisationID;
            PhoneNumber = phoneNumber;
            EmailAddress = emailAddress;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "age")]
        public string Age { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hadDamageOrTheftBefore")]
        public bool? HadDamageOrTheftBefore { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "damageFreeYears")]
        public string DamageFreeYears { get; set; }

        /// <summary>
        /// Possible values include: 'Unknown', 'LessThan10000',
        /// 'Between10000and15000', 'Between15000and20000',
        /// 'Between20000and25000', 'MoreThan25000'
        /// </summary>
        [JsonProperty(PropertyName = "kilometersPerYear")]
        public string KilometersPerYear { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "zipCode")]
        public string ZipCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "country")]
        public string Country { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "residenceAddress")]
        public Address ResidenceAddress { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isCorrespondenceAddressDifferent")]
        public bool? IsCorrespondenceAddressDifferent { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "correspondenceAddress")]
        public Address CorrespondenceAddress { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isSelfEmployed")]
        public bool? IsSelfEmployed { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sex")]
        public string Sex { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "birthDate")]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "socialSecurityNumber")]
        public string SocialSecurityNumber { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "haveIncome")]
        public string HaveIncome { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "organisationName")]
        public string OrganisationName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "organisationID")]
        public string OrganisationID { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "phoneNumber")]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "emailAddress")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (this.ResidenceAddress != null)
            {
                this.ResidenceAddress.Validate();
            }
            if (this.CorrespondenceAddress != null)
            {
                this.CorrespondenceAddress.Validate();
            }
        }
    }
}
