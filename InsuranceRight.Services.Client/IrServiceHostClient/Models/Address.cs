// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace IrServiceHost.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class Address
    {
        /// <summary>
        /// Initializes a new instance of the Address class.
        /// </summary>
        public Address() { }

        /// <summary>
        /// Initializes a new instance of the Address class.
        /// </summary>
        public Address(string zipCode = default(string), string houseNumber = default(string), string houseNumberExtension = default(string), string street = default(string), string city = default(string), string country = default(string))
        {
            ZipCode = zipCode;
            HouseNumber = houseNumber;
            HouseNumberExtension = houseNumberExtension;
            Street = street;
            City = city;
            Country = country;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "zipCode")]
        public string ZipCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "houseNumber")]
        public string HouseNumber { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "houseNumberExtension")]
        public string HouseNumberExtension { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "street")]
        public string Street { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "city")]
        public string City { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "country")]
        public string Country { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (this.ZipCode != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.ZipCode, "^[1-9][0-9]{3}[A-Z]{2}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "ZipCode", "^[1-9][0-9]{3}[A-Z]{2}$");
                }
            }
        }
    }
}
