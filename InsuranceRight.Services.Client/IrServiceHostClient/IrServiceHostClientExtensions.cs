// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace IrServiceHost
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for IrServiceHostClient.
    /// </summary>
    public static partial class IrServiceHostClientExtensions
    {
            /// <summary>
            /// Acceptance check on current data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewModel'>
            /// Current data. Can include -1- Car details (licenseplate, price, security
            /// measurements, etc), -2- Most frequent driver details, -3- Risk assesment
            /// answers
            /// </param>
            public static void ApiAcceptanceCheckPost(this IIrServiceHostClient operations, CarViewModel viewModel = default(CarViewModel))
            {
                Task.Factory.StartNew(s => ((IIrServiceHostClient)s).ApiAcceptanceCheckPostAsync(viewModel), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Acceptance check on current data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewModel'>
            /// Current data. Can include -1- Car details (licenseplate, price, security
            /// measurements, etc), -2- Most frequent driver details, -3- Risk assesment
            /// answers
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiAcceptanceCheckPostAsync(this IIrServiceHostClient operations, CarViewModel viewModel = default(CarViewModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiAcceptanceCheckPostWithHttpMessagesAsync(viewModel, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Method for validating a zipcode
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zipCode'>
            /// The zipcode to validate
            /// </param>
            public static ReturnObjectZipCode ApiAddressLookupValidateZipcodePost(this IIrServiceHostClient operations, ZipCode zipCode = default(ZipCode))
            {
                return Task.Factory.StartNew(s => ((IIrServiceHostClient)s).ApiAddressLookupValidateZipcodePostAsync(zipCode), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Method for validating a zipcode
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zipCode'>
            /// The zipcode to validate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReturnObjectZipCode> ApiAddressLookupValidateZipcodePostAsync(this IIrServiceHostClient operations, ZipCode zipCode = default(ZipCode), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAddressLookupValidateZipcodePostWithHttpMessagesAsync(zipCode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Method for getting the full details of an address
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address'>
            /// Incomplete Address to fill with details
            /// </param>
            public static ReturnObjectAddress ApiAddressLookupGetFullAddressPost(this IIrServiceHostClient operations, Address address = default(Address))
            {
                return Task.Factory.StartNew(s => ((IIrServiceHostClient)s).ApiAddressLookupGetFullAddressPostAsync(address), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Method for getting the full details of an address
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address'>
            /// Incomplete Address to fill with details
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReturnObjectAddress> ApiAddressLookupGetFullAddressPostAsync(this IIrServiceHostClient operations, Address address = default(Address), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAddressLookupGetFullAddressPostWithHttpMessagesAsync(address, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the discount amount(decimal) based on the provided code
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='discountCode'>
            /// Discount code
            /// </param>
            public static void ApiCarDiscountPolicyPost(this IIrServiceHostClient operations, string discountCode = default(string))
            {
                Task.Factory.StartNew(s => ((IIrServiceHostClient)s).ApiCarDiscountPolicyPostAsync(discountCode), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the discount amount(decimal) based on the provided code
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='discountCode'>
            /// Discount code
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiCarDiscountPolicyPostAsync(this IIrServiceHostClient operations, string discountCode = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiCarDiscountPolicyPostWithHttpMessagesAsync(discountCode, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get all possible models of the provided brand car
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='brand'>
            /// Brand of the car
            /// </param>
            public static ReturnObjectListString ApiCarLookupGetModelsPost(this IIrServiceHostClient operations, string brand = default(string))
            {
                return Task.Factory.StartNew(s => ((IIrServiceHostClient)s).ApiCarLookupGetModelsPostAsync(brand), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all possible models of the provided brand car
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='brand'>
            /// Brand of the car
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReturnObjectListString> ApiCarLookupGetModelsPostAsync(this IIrServiceHostClient operations, string brand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCarLookupGetModelsPostWithHttpMessagesAsync(brand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all editions of the provided brand and model car
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewModel'>
            /// Model containing a brand(string) and model(string)
            /// </param>
            public static void ApiCarLookupGetEditionsPost(this IIrServiceHostClient operations, CarLookupViewModel viewModel = default(CarLookupViewModel))
            {
                Task.Factory.StartNew(s => ((IIrServiceHostClient)s).ApiCarLookupGetEditionsPostAsync(viewModel), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all editions of the provided brand and model car
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewModel'>
            /// Model containing a brand(string) and model(string)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiCarLookupGetEditionsPostAsync(this IIrServiceHostClient operations, CarLookupViewModel viewModel = default(CarLookupViewModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiCarLookupGetEditionsPostWithHttpMessagesAsync(viewModel, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get the details (weight and catalog value) of the provided car
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewModel'>
            /// Model containing a brand(string), model(string) and edition(string) of the
            /// car to get the weight for
            /// </param>
            public static void ApiCarLookupGetEditionDetailsPost(this IIrServiceHostClient operations, CarLookupViewModel viewModel = default(CarLookupViewModel))
            {
                Task.Factory.StartNew(s => ((IIrServiceHostClient)s).ApiCarLookupGetEditionDetailsPostAsync(viewModel), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the details (weight and catalog value) of the provided car
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewModel'>
            /// Model containing a brand(string), model(string) and edition(string) of the
            /// car to get the weight for
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiCarLookupGetEditionDetailsPostAsync(this IIrServiceHostClient operations, CarLookupViewModel viewModel = default(CarLookupViewModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiCarLookupGetEditionDetailsPostWithHttpMessagesAsync(viewModel, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get the weight of the provided car
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewModel'>
            /// Model containing a brand(string), model(string) and edition(string) of the
            /// car to get the weight for
            /// </param>
            public static void ApiCarLookupGetWeightPost(this IIrServiceHostClient operations, CarLookupViewModel viewModel = default(CarLookupViewModel))
            {
                Task.Factory.StartNew(s => ((IIrServiceHostClient)s).ApiCarLookupGetWeightPostAsync(viewModel), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the weight of the provided car
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewModel'>
            /// Model containing a brand(string), model(string) and edition(string) of the
            /// car to get the weight for
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiCarLookupGetWeightPostAsync(this IIrServiceHostClient operations, CarLookupViewModel viewModel = default(CarLookupViewModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiCarLookupGetWeightPostWithHttpMessagesAsync(viewModel, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get the catalog value of the provided car
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewModel'>
            /// Model containing a brand(string), model(string) and edition(string) of the
            /// car to get the catalog value for
            /// </param>
            public static void ApiCarLookupGetCatalogValuePost(this IIrServiceHostClient operations, CarLookupViewModel viewModel = default(CarLookupViewModel))
            {
                Task.Factory.StartNew(s => ((IIrServiceHostClient)s).ApiCarLookupGetCatalogValuePostAsync(viewModel), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the catalog value of the provided car
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewModel'>
            /// Model containing a brand(string), model(string) and edition(string) of the
            /// car to get the catalog value for
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiCarLookupGetCatalogValuePostAsync(this IIrServiceHostClient operations, CarLookupViewModel viewModel = default(CarLookupViewModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiCarLookupGetCatalogValuePostWithHttpMessagesAsync(viewModel, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get the policy documents for the chosen insurance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewModel'>
            /// CarViewModel
            /// </param>
            public static void ApiCarPolicyDocumentGetDocumentsPost(this IIrServiceHostClient operations, CarViewModel viewModel = default(CarViewModel))
            {
                Task.Factory.StartNew(s => ((IIrServiceHostClient)s).ApiCarPolicyDocumentGetDocumentsPostAsync(viewModel), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the policy documents for the chosen insurance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewModel'>
            /// CarViewModel
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiCarPolicyDocumentGetDocumentsPostAsync(this IIrServiceHostClient operations, CarViewModel viewModel = default(CarViewModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiCarPolicyDocumentGetDocumentsPostWithHttpMessagesAsync(viewModel, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get Package Variants (MTPL || MTPL Limited Casco || MTPL All Risk)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewModel'>
            /// Viewmodel containg licenseplate, driver-age, -damagefreeyears,
            /// -residenceaddress zipcode and -kilometersPerYear
            /// </param>
            public static void ApiCarPremiumPolicyGetVariantsPost(this IIrServiceHostClient operations, CarViewModel viewModel = default(CarViewModel))
            {
                Task.Factory.StartNew(s => ((IIrServiceHostClient)s).ApiCarPremiumPolicyGetVariantsPostAsync(viewModel), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Package Variants (MTPL || MTPL Limited Casco || MTPL All Risk)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewModel'>
            /// Viewmodel containg licenseplate, driver-age, -damagefreeyears,
            /// -residenceaddress zipcode and -kilometersPerYear
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiCarPremiumPolicyGetVariantsPostAsync(this IIrServiceHostClient operations, CarViewModel viewModel = default(CarViewModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiCarPremiumPolicyGetVariantsPostWithHttpMessagesAsync(viewModel, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get Coverages
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewModel'>
            /// Viewmodel containg licenseplate, driver-age, -damagefreeyears and
            /// -residenceaddress zipcode
            /// </param>
            public static void ApiCarPremiumPolicyGetCoveragesPost(this IIrServiceHostClient operations, CarViewModel viewModel = default(CarViewModel))
            {
                Task.Factory.StartNew(s => ((IIrServiceHostClient)s).ApiCarPremiumPolicyGetCoveragesPostAsync(viewModel), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Coverages
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewModel'>
            /// Viewmodel containg licenseplate, driver-age, -damagefreeyears and
            /// -residenceaddress zipcode
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiCarPremiumPolicyGetCoveragesPostAsync(this IIrServiceHostClient operations, CarViewModel viewModel = default(CarViewModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiCarPremiumPolicyGetCoveragesPostWithHttpMessagesAsync(viewModel, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get Coverages and Variants
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewModel'>
            /// Viewmodel containg licenseplate, driver-age, -damagefreeyears and
            /// -residenceaddress zipcode
            /// </param>
            public static void ApiCarPremiumPolicyGetVariantsAndCoveragesPost(this IIrServiceHostClient operations, CarViewModel viewModel = default(CarViewModel))
            {
                Task.Factory.StartNew(s => ((IIrServiceHostClient)s).ApiCarPremiumPolicyGetVariantsAndCoveragesPostAsync(viewModel), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Coverages and Variants
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewModel'>
            /// Viewmodel containg licenseplate, driver-age, -damagefreeyears and
            /// -residenceaddress zipcode
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiCarPremiumPolicyGetVariantsAndCoveragesPostAsync(this IIrServiceHostClient operations, CarViewModel viewModel = default(CarViewModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiCarPremiumPolicyGetVariantsAndCoveragesPostWithHttpMessagesAsync(viewModel, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get the discount based on the payment frequency
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewModel'>
            /// Viewmodel containing the payment frequency
            /// </param>
            public static void ApiCarPremiumPolicyPaymentFrequencyDiscountPost(this IIrServiceHostClient operations, CarViewModel viewModel = default(CarViewModel))
            {
                Task.Factory.StartNew(s => ((IIrServiceHostClient)s).ApiCarPremiumPolicyPaymentFrequencyDiscountPostAsync(viewModel), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the discount based on the payment frequency
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='viewModel'>
            /// Viewmodel containing the payment frequency
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiCarPremiumPolicyPaymentFrequencyDiscountPostAsync(this IIrServiceHostClient operations, CarViewModel viewModel = default(CarViewModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiCarPremiumPolicyPaymentFrequencyDiscountPostWithHttpMessagesAsync(viewModel, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Returns the Car details of the car corresponding to the give license-plate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='licensePlate'>
            /// The license-plate from the car to get the details from
            /// </param>
            public static void ApiLicensePlateLookupGetCarDetailsPost(this IIrServiceHostClient operations, LicensePlate licensePlate = default(LicensePlate))
            {
                Task.Factory.StartNew(s => ((IIrServiceHostClient)s).ApiLicensePlateLookupGetCarDetailsPostAsync(licensePlate), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the Car details of the car corresponding to the give license-plate
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='licensePlate'>
            /// The license-plate from the car to get the details from
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiLicensePlateLookupGetCarDetailsPostAsync(this IIrServiceHostClient operations, LicensePlate licensePlate = default(LicensePlate), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiLicensePlateLookupGetCarDetailsPostWithHttpMessagesAsync(licensePlate, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
